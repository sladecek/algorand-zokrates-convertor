import binascii
from typing import Tuple, List

from algosdk.v2client.algod import AlgodClient
from algosdk import transaction

from pyteal import compileTeal, Mode

from .account import Account
from .contracts import  pay_for_valid_magic_square
from .util import (
    waitForTransaction,
    fullyCompileSmartSignature,
)

ZKVERIFIER_PROGRAM = b""


def getContracts(client: AlgodClient) -> Tuple[bytes, bytes]:
  
    global ZKVERIFIER_PROGRAM

    if len(ZKVERIFIER_PROGRAM) == 0:
        ZKVERIFIER_PROGRAM = fullyCompileSmartSignature(client, pay_for_valid_magic_square())

    return ZKVERIFIER_PROGRAM


def payForValidMagicSquare(
    client: AlgodClient,
    donor: Account,
    claimer: Account
):
    """Sends a ZK proof of knowledge of a magic square to an algorand contract. 
    """
    zk_verifier_program = getContracts(client)

    # The argument were generated by Zocrates and converted to this form by 'zocrates2algorand compile_proof'. This call does not contain any
    # information about the square. It only proves, that we knew one when Zocrates generated the proof for us.
    args = []     
    # a,b,c elliptic points from Groth16 proof
    args.append(binascii.unhexlify("25a882815ead1d973716971a8a988ddf06a4985e0c4b128d278f38941aac0f9614b91473769cd19addae135b57700b880443c445a5c6003976068cd5020fbe69"))
    args.append(binascii.unhexlify("14c893f2dc286e0c835382e91115c046989c3ba0af7671fb7aafbf36fcf635a229e795be5e1244ef9f68088debd371dfd69e3211a89bbb64d27373dae38f8ea00f1ea2a3b32a4964f0f298dd55af4ea8dce4fc3d1560a849fab05224b17d7f562b1931fd8ead4d57f1863ddb831df2b703951ff3e23000040a863721ade7b9c7"))
    args.append(binascii.unhexlify("13f17c59c646f769ea853145b74b26d4c7d18d39b1a02757b51549e5e8ca16dd2bf2d2150da2ecb33160d80a321a37aa9860ae11cbe7f386fe122b5c53e02ab1"))
    # a public input (field element) - the magnitude of the magic square (15)
    args.append(binascii.unhexlify("0f"))

    # Standard part of the call
    lsig = transaction.LogicSigAccount(zk_verifier_program, args=args)
    lsig.sign(donor.getPrivateKey());

    params = client.suggested_params()
    params.flat_fee = True
    params.fee = 1000
    note = "ZK proof of knowledge of a magic cube suming to 15".encode()
    unsigned_txn = transaction.PaymentTxn(donor.getAddress(), params, claimer.getAddress(), 1000, None, note)
    signed_txn = transaction.LogicSigTransaction(unsigned_txn, lsig)
    txid = client.send_transaction(signed_txn)
    print("Successfully sent transaction with txID: {}".format(txid))
    response = waitForTransaction(client, txid)
    print(f"Response: {response.logs}")

