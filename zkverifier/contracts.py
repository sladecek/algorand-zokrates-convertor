from pyteal import *
from pyteal import Expr, Mode, TealType, BinaryExpr

# Custom operations: these instructions are implemented in algorandd but are compiled by the pyteal compiler yet.
class CustomOp:
    def __init__(self, opcode):
        self.opcode = opcode
        self.mode = Mode.Signature | Mode.Application
        self.min_version = 4

    def __str__(self) -> str:
        return self.opcode

def B256Add(left: Expr, right: Expr) -> Expr:
    return BinaryExpr(CustomOp("bn256_add"), TealType.bytes, TealType.bytes, left, right)

def B256ScalarMul(left: Expr, right: Expr) -> Expr:
    return BinaryExpr(CustomOp("bn256_scalar_mul"), TealType.bytes, TealType.bytes, left, right)

def B256Pairing(left: Expr, right: Expr) -> Expr:
    return BinaryExpr(CustomOp("bn256_pairing"), TealType.bytes, TealType.uint64, left, right)


def pay_for_valid_magic_square():
    """Pyteal contract which pays for magic squares withou revealing them. It is an example of zero knowledge verification in 
    in an algorand contract. The owner verifies a zero knowledge proof and if the proof is valid, transfers funds to the sender.
    
    The contract was generated by combnation of Zocrates system and 'zocrates2algorand'. 
    """

    # Verifying key  
    g2elems = Bytes("base16","0x0bf88a635797f523185da3a47017c7669ff557e70a5ef31967982d1ef983b6d02b04e82a42984057460acca7840127784c704b22a97b4265c48bdba65879b01e1f9804ceff304829b53680361d147bcd6326e6ed232c7c0d090102349f3903a81139917302607fca1f58f227698a90a3f53c63bf0257dcacc373aeb6f000a40c14e4e0f1b855da86ee7fb1f555c2f7e5bef8d560ed1437049f34b509b637324a29a422f85d857aff66ce80a15e0266d60a932d8b18613eedd7ea8f1b55a30f5527c1e98d12e81eb089cfcd1279b223c899d6449fc18d7596f884aa717e2a49ce1762b66641a6f4ddc9a20aa0b1fefd1b328da9d2d9a32e96e7e352e2b0c9c5a520fc1f2dc71577f52490d30a9f984603fea40e0fd6fdbadc4fde9c9ad9334caa1190cb35400193c24288fdf721ea2a2963afe4579082aeb30fd8ca25b396827d0bc221f5a76d76c2b638e7ca5ff5b0bc66dbbcb00df2af40cd026b63d2b51fff0a03d41bd6246b3dfa0f6a87879b564075086f6bdfe5db4055b63d288daf75ad")
    g1elems = Bytes("base16","0x0f00ce617c4487ccbb4c20300a7cea437b41fefe480d16d58a00e0130d002d102ee3fb71ef641ae2cbc4b776105ae91b373e26d5b6ef457a5a7f2b2f17176a6a")
    gammaabc_0 = Bytes("base16","0x208f5d321b0c8a510659f215ca7d4790c5bdd0e9e923c70eefd625ead34dd9ed0d8f33dd8716f1f04b21449cb6bd521752048b0db1df43f29b9b747b5721cae5")
    gammaabc_1 = Bytes("base16","0x25826704beff49b4da3546ac05a0970ff7182376da9a0f5878e51363c229fdbc10813ca891d1fd89ba1232a3c3ebf5d8bd7cf174e79628d3c10f18e7230da5c1")
    
    # Compute pairing inputs
    vkx = gammaabc_0
    x = B256ScalarMul(gammaabc_1, Arg(3))
    vkx = B256Add(vkx, x)
    g2 = Concat(Arg(1), g2elems)
    g1 = Concat(Arg(0), vkx, Arg(2), g1elems)

    # This is an expected result for debugging (generates by 'zokrates2algorand verify')
    #vkx_check = Bytes("base16","0x17357fe4a380520d23a1f2cd4592b0c2290f231133f1cbd5c95dbce43ef31986243b111ea8fafa2cd27168ad2c58f3f63fbea433d807ff33c65f4e70d5574c77")
    #g1_check = Bytes("base16","0x25a882815ead1d973716971a8a988ddf06a4985e0c4b128d278f38941aac0f9614b91473769cd19addae135b57700b880443c445a5c6003976068cd5020fbe6917357fe4a380520d23a1f2cd4592b0c2290f231133f1cbd5c95dbce43ef31986243b111ea8fafa2cd27168ad2c58f3f63fbea433d807ff33c65f4e70d5574c7713f17c59c646f769ea853145b74b26d4c7d18d39b1a02757b51549e5e8ca16dd2bf2d2150da2ecb33160d80a321a37aa9860ae11cbe7f386fe122b5c53e02ab10f00ce617c4487ccbb4c20300a7cea437b41fefe480d16d58a00e0130d002d102ee3fb71ef641ae2cbc4b776105ae91b373e26d5b6ef457a5a7f2b2f17176a6a")
    #g2_check = Bytes("base16","0x14c893f2dc286e0c835382e91115c046989c3ba0af7671fb7aafbf36fcf635a229e795be5e1244ef9f68088debd371dfd69e3211a89bbb64d27373dae38f8ea00f1ea2a3b32a4964f0f298dd55af4ea8dce4fc3d1560a849fab05224b17d7f562b1931fd8ead4d57f1863ddb831df2b703951ff3e23000040a863721ade7b9c70bf88a635797f523185da3a47017c7669ff557e70a5ef31967982d1ef983b6d02b04e82a42984057460acca7840127784c704b22a97b4265c48bdba65879b01e1f9804ceff304829b53680361d147bcd6326e6ed232c7c0d090102349f3903a81139917302607fca1f58f227698a90a3f53c63bf0257dcacc373aeb6f000a40c14e4e0f1b855da86ee7fb1f555c2f7e5bef8d560ed1437049f34b509b637324a29a422f85d857aff66ce80a15e0266d60a932d8b18613eedd7ea8f1b55a30f5527c1e98d12e81eb089cfcd1279b223c899d6449fc18d7596f884aa717e2a49ce1762b66641a6f4ddc9a20aa0b1fefd1b328da9d2d9a32e96e7e352e2b0c9c5a520fc1f2dc71577f52490d30a9f984603fea40e0fd6fdbadc4fde9c9ad9334caa1190cb35400193c24288fdf721ea2a2963afe4579082aeb30fd8ca25b396827d0bc221f5a76d76c2b638e7ca5ff5b0bc66dbbcb00df2af40cd026b63d2b51fff0a03d41bd6246b3dfa0f6a87879b564075086f6bdfe5db4055b63d288daf75ad")
    
    # Final verifiaction
    return B256Pairing(g1, g2) == Int(1)

def __custom_operation_test():
    n1= Bytes("base16","0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002")
    n2= Bytes("base16","0x030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd315ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4")
    n3= Bytes("base16","0x0769bf9ac56bea3ff40232bcb1b6bd159315d84715b8e679f2d355961915abf02ab799bee0489429554fdb7c8d086475319e63b40b9c5b57cdf1ff3dd9fe2261")
    n4= Bytes("base16","0x03")

    n7= Bytes("base16","0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c212c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c212c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b")
    n8= Bytes("base16","0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000130644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd45")

    return And(
        B256Add(n1, n2) == n3,
        B256ScalarMul(n1, n4) == n3,
        B256Pairing(n8, n7) == Int(1)
    )

if __name__ == "__main__":
    with open("pay_for_valid_magic_square.teal", "w") as f:
        compiled = compileTeal(pay_for_valid_magic_square(), mode=Mode.Signature, version=9)
        f.write(compiled)
